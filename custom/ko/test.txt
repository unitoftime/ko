package main

type structTest struct {
	X int
	Y int
}
func structTestPrint(st structTest) {
	printf("structTestPrint: {%d, %d}\n", st.X, st.Y)
	var old = st.X
	st.X = st.Y
	st.Y = old
	printf("flipped:         {%d, %d}\n", st.X, st.Y)
	// printf("%p", &st)
}

func structInFunc() {
	type structTest struct {
		X int
		Y int
	}
	var st = structTest{2, 3}
	printf("structInFunc: {%d, %d}\n", st.X, st.Y)
}

func fib(n int) int {
	if n <= 1 {
		return n
	}
	return fib(n - 2) + fib(n - 1)
}

func add(a int, b int) int {
	var x = a + b * 5 / 3

	if a < b {
		x = a + b
	}	else {
		x = a - b
	}
	return x
}


var globA = 5
func add2(b int) int {
	return globA + b
}

// TODO: I think when I do closures I may want to just manually handle them, rather than rely on gcc
// // Note: I think this only works in gcc and isn't standard c
// func closure() {
// 	var i = 0
// 	func count() {
// 		i = i + 1
// 	}

// 	count()
// 	count()
// 	count()
// 	printf("Closure Count: %d", i)
// }

func main() {
	printf("hello world, %d\n", add(1, 2))

	for var i = 0; i < 20; i = i + 1 {
		printf("Fib %d: %d\n", i, fib(i))
	}

	printf("GlobAdd(9): %d\n", add2(4))

	var st = structTest{1, 2}
	structTestPrint(st)

	structInFunc()
	// closure()
}

// #include <stdio.h>

// int main() {
//   printf("Hello, World!\n");
//   return 0;
// }
